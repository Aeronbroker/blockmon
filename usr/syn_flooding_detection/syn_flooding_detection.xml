<!--
Sample standalone composition for SYN flooding detection with a parallelization of 2 SynCounter blocks.
This is just an example to prove it works, there actually is only 1 thread.
-->

<composition id="syn_flooding" app_id="syn_flood_det">
	<install>
	
		<threadpool id="common_thread" num_threads="2" >
			<core number="0"/>
		</threadpool>
		
		<block id="sniffer" type="pcap_sniffer" sched_type="active" threadpool="common_thread"> 
			<params>
				<source type="live" name="eth0"/>
			</params>
		</block>
		
		<block id="syn_synchronizer" type="syn_synchronizer"  sched_type="active" threadpool="common_thread"> 
			<params>
			    <sketch width="4096" depth="8" />
			</params>
		</block>
		
		<block id="test_splitter" type="test_splitter"> 
			<params>
			</params>
		</block>
	
		<block id="tuple_parser1" type="tuple_parser"> 
			<params>
			</params>
		</block>
	
		<block id="tuple_parser2" type="tuple_parser"> 
			<params>
			</params>
		</block>
		
		<block id="tuple_demux1" type="tuple_demux" > 
			<params>
			  <gate_tcp state="on" />
			  <gate_udp state="off" />
			  <gate_other state="off" />
			</params>
		</block>
		
		<block id="tuple_demux2" type="tuple_demux" > 
			<params>
			  <gate_tcp state="on" />
			  <gate_udp state="off" />
			  <gate_other state="off" />
			</params>
		</block>
		
		<block id="syn_counter1" type="syn_counter"> 
			<params>
			    <export period="500000" />
			</params>
		</block>
		
		<block id="syn_counter2" type="syn_counter"> 
			<params>
			    <export period="500000" />
			</params>
		</block>
		
		<block id="cms_merger" type="cms_merger"> 
			<params>
			    <merge number="2" />
			</params>
		</block>
		
		<block id="syn_flooding_detection" type="syn_flooding_detection"> 
			<params>
			    <cusum threshold="50" offset="10" mean_window="20" />
			</params>
		</block>

		<connection src_block="sniffer" src_gate="sniffer_out" dst_block="test_splitter" dst_gate="input" />
		
		<connection src_block="syn_synchronizer" src_gate="out_sketch_proto" dst_block="syn_counter1" dst_gate="in_sketch_proto" />
		<connection src_block="syn_synchronizer" src_gate="out_sketch_proto" dst_block="syn_counter2" dst_gate="in_sketch_proto" />
		
		<connection src_block="test_splitter" src_gate="output1" dst_block="tuple_parser1" dst_gate="in_pkt" />
		<connection src_block="test_splitter" src_gate="output2" dst_block="tuple_parser2" dst_gate="in_pkt" />		
		
		<connection src_block="tuple_parser1" src_gate="out_pkt" dst_block="tuple_demux1" dst_gate="in_pkt" />
		<connection src_block="tuple_parser2" src_gate="out_pkt" dst_block="tuple_demux2" dst_gate="in_pkt" />
		
		<connection src_block="tuple_demux1" src_gate="out_pkt_tcp" dst_block="syn_counter1" dst_gate="in_pkt" />
		<connection src_block="tuple_demux2" src_gate="out_pkt_tcp" dst_block="syn_counter2" dst_gate="in_pkt" />
		
		<connection src_block="syn_counter1" src_gate="out_sketch" dst_block="cms_merger" dst_gate="in_sketch" />
		<connection src_block="syn_counter2" src_gate="out_sketch" dst_block="cms_merger" dst_gate="in_sketch" />
		
		<connection src_block="cms_merger" src_gate="out_sketch" dst_block="syn_flooding_detection" dst_gate="in_sketch" />

		<connection src_block="syn_flooding_detection" src_gate="out_alert" dst_block="syn_counter1" dst_gate="in_alert" />
		<connection src_block="syn_flooding_detection" src_gate="out_alert" dst_block="syn_counter2" dst_gate="in_alert" />

	</install>

</composition>


				
